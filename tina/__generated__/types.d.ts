//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String'];
  path: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  homepage: Homepage;
  homepageConnection: HomepageConnection;
  author: Author;
  authorConnection: AuthorConnection;
  posts: Posts;
  postsConnection: PostsConnection;
  emergency_contacts: Emergency_Contacts;
  emergency_contactsConnection: Emergency_ContactsConnection;
  about: About;
  aboutConnection: AboutConnection;
  bloodBanks: BloodBanks;
  bloodBanksConnection: BloodBanksConnection;
  dialysisCenters: DialysisCenters;
  dialysisCentersConnection: DialysisCentersConnection;
  hospitals: Hospitals;
  hospitalsConnection: HospitalsConnection;
  nephrologyDoctors: NephrologyDoctors;
  nephrologyDoctorsConnection: NephrologyDoctorsConnection;
  urologyDoctors: UrologyDoctors;
  urologyDoctorsConnection: UrologyDoctorsConnection;
  vascularSurgeons: VascularSurgeons;
  vascularSurgeonsConnection: VascularSurgeonsConnection;
  faq: Faq;
  faqConnection: FaqConnection;
  contact: Contact;
  contactConnection: ContactConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryHomepageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryHomepageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HomepageFilter>;
};


export type QueryAuthorArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAuthorConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
};


export type QueryPostsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPostsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PostsFilter>;
};


export type QueryEmergency_ContactsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryEmergency_ContactsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<Emergency_ContactsFilter>;
};


export type QueryAboutArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAboutConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AboutFilter>;
};


export type QueryBloodBanksArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryBloodBanksConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<BloodBanksFilter>;
};


export type QueryDialysisCentersArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDialysisCentersConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DialysisCentersFilter>;
};


export type QueryHospitalsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryHospitalsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HospitalsFilter>;
};


export type QueryNephrologyDoctorsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryNephrologyDoctorsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<NephrologyDoctorsFilter>;
};


export type QueryUrologyDoctorsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryUrologyDoctorsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<UrologyDoctorsFilter>;
};


export type QueryVascularSurgeonsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryVascularSurgeonsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<VascularSurgeonsFilter>;
};


export type QueryFaqArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryFaqConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<FaqFilter>;
};


export type QueryContactArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryContactConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ContactFilter>;
};

export type DocumentFilter = {
  homepage?: InputMaybe<HomepageFilter>;
  author?: InputMaybe<AuthorFilter>;
  posts?: InputMaybe<PostsFilter>;
  emergency_contacts?: InputMaybe<Emergency_ContactsFilter>;
  about?: InputMaybe<AboutFilter>;
  bloodBanks?: InputMaybe<BloodBanksFilter>;
  dialysisCenters?: InputMaybe<DialysisCentersFilter>;
  hospitals?: InputMaybe<HospitalsFilter>;
  nephrologyDoctors?: InputMaybe<NephrologyDoctorsFilter>;
  urologyDoctors?: InputMaybe<UrologyDoctorsFilter>;
  vascularSurgeons?: InputMaybe<VascularSurgeonsFilter>;
  faq?: InputMaybe<FaqFilter>;
  contact?: InputMaybe<ContactFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Homepage | Author | Posts | Emergency_Contacts | About | BloodBanks | DialysisCenters | Hospitals | NephrologyDoctors | UrologyDoctors | VascularSurgeons | Faq | Contact | Folder;

export type HomepageBanner = {
  __typename?: 'HomepageBanner';
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type HomepageNotice = {
  __typename?: 'HomepageNotice';
  enable?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type Homepage = Node & Document & {
  __typename?: 'Homepage';
  banner?: Maybe<Array<Maybe<HomepageBanner>>>;
  notice?: Maybe<HomepageNotice>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type HomepageBannerFilter = {
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type HomepageNoticeFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type HomepageFilter = {
  banner?: InputMaybe<HomepageBannerFilter>;
  notice?: InputMaybe<HomepageNoticeFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type HomepageConnectionEdges = {
  __typename?: 'HomepageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Homepage>;
};

export type HomepageConnection = Connection & {
  __typename?: 'HomepageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<HomepageConnectionEdges>>>;
};

export type Author = Node & Document & {
  __typename?: 'Author';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type AuthorFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  bio?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Author>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type Posts = Node & Document & {
  __typename?: 'Posts';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PostsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostsConnectionEdges = {
  __typename?: 'PostsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Posts>;
};

export type PostsConnection = Connection & {
  __typename?: 'PostsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type Emergency_Contacts = Node & Document & {
  __typename?: 'Emergency_contacts';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type Emergency_ContactsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Emergency_ContactsConnectionEdges = {
  __typename?: 'Emergency_contactsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Emergency_Contacts>;
};

export type Emergency_ContactsConnection = Connection & {
  __typename?: 'Emergency_contactsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<Emergency_ContactsConnectionEdges>>>;
};

export type About = Node & Document & {
  __typename?: 'About';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type AboutBodyMembersFilter = {
  members?: InputMaybe<StringFilter>;
};

export type AboutBodyFilter = {
  members?: InputMaybe<AboutBodyMembersFilter>;
};

export type AboutFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<AboutBodyFilter>;
};

export type AboutConnectionEdges = {
  __typename?: 'AboutConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<About>;
};

export type AboutConnection = Connection & {
  __typename?: 'AboutConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AboutConnectionEdges>>>;
};

export type BloodBanksContact_List = {
  __typename?: 'BloodBanksContact_list';
  name?: Maybe<Scalars['String']>;
  specialist?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  contact_details?: Maybe<Scalars['String']>;
};

export type BloodBanks = Node & Document & {
  __typename?: 'BloodBanks';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_list?: Maybe<Array<Maybe<BloodBanksContact_List>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type BloodBanksContact_ListFilter = {
  name?: InputMaybe<StringFilter>;
  specialist?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  contact_details?: InputMaybe<StringFilter>;
};

export type BloodBanksFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_list?: InputMaybe<BloodBanksContact_ListFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type BloodBanksConnectionEdges = {
  __typename?: 'BloodBanksConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<BloodBanks>;
};

export type BloodBanksConnection = Connection & {
  __typename?: 'BloodBanksConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<BloodBanksConnectionEdges>>>;
};

export type DialysisCentersContact_List = {
  __typename?: 'DialysisCentersContact_list';
  name?: Maybe<Scalars['String']>;
  specialist?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  contact_details?: Maybe<Scalars['String']>;
};

export type DialysisCenters = Node & Document & {
  __typename?: 'DialysisCenters';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_list?: Maybe<Array<Maybe<DialysisCentersContact_List>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DialysisCentersContact_ListFilter = {
  name?: InputMaybe<StringFilter>;
  specialist?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  contact_details?: InputMaybe<StringFilter>;
};

export type DialysisCentersFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_list?: InputMaybe<DialysisCentersContact_ListFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type DialysisCentersConnectionEdges = {
  __typename?: 'DialysisCentersConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DialysisCenters>;
};

export type DialysisCentersConnection = Connection & {
  __typename?: 'DialysisCentersConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DialysisCentersConnectionEdges>>>;
};

export type HospitalsContact_List = {
  __typename?: 'HospitalsContact_list';
  name?: Maybe<Scalars['String']>;
  specialist?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  contact_details?: Maybe<Scalars['String']>;
};

export type Hospitals = Node & Document & {
  __typename?: 'Hospitals';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_list?: Maybe<Array<Maybe<HospitalsContact_List>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type HospitalsContact_ListFilter = {
  name?: InputMaybe<StringFilter>;
  specialist?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  contact_details?: InputMaybe<StringFilter>;
};

export type HospitalsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_list?: InputMaybe<HospitalsContact_ListFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type HospitalsConnectionEdges = {
  __typename?: 'HospitalsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Hospitals>;
};

export type HospitalsConnection = Connection & {
  __typename?: 'HospitalsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<HospitalsConnectionEdges>>>;
};

export type NephrologyDoctorsContact_List = {
  __typename?: 'NephrologyDoctorsContact_list';
  name?: Maybe<Scalars['String']>;
  specialist?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  contact_details?: Maybe<Scalars['String']>;
};

export type NephrologyDoctors = Node & Document & {
  __typename?: 'NephrologyDoctors';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_list?: Maybe<Array<Maybe<NephrologyDoctorsContact_List>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type NephrologyDoctorsContact_ListFilter = {
  name?: InputMaybe<StringFilter>;
  specialist?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  contact_details?: InputMaybe<StringFilter>;
};

export type NephrologyDoctorsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_list?: InputMaybe<NephrologyDoctorsContact_ListFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type NephrologyDoctorsConnectionEdges = {
  __typename?: 'NephrologyDoctorsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<NephrologyDoctors>;
};

export type NephrologyDoctorsConnection = Connection & {
  __typename?: 'NephrologyDoctorsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<NephrologyDoctorsConnectionEdges>>>;
};

export type UrologyDoctorsContact_List = {
  __typename?: 'UrologyDoctorsContact_list';
  name?: Maybe<Scalars['String']>;
  specialist?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  contact_details?: Maybe<Scalars['String']>;
};

export type UrologyDoctors = Node & Document & {
  __typename?: 'UrologyDoctors';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_list?: Maybe<Array<Maybe<UrologyDoctorsContact_List>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type UrologyDoctorsContact_ListFilter = {
  name?: InputMaybe<StringFilter>;
  specialist?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  contact_details?: InputMaybe<StringFilter>;
};

export type UrologyDoctorsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_list?: InputMaybe<UrologyDoctorsContact_ListFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type UrologyDoctorsConnectionEdges = {
  __typename?: 'UrologyDoctorsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<UrologyDoctors>;
};

export type UrologyDoctorsConnection = Connection & {
  __typename?: 'UrologyDoctorsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<UrologyDoctorsConnectionEdges>>>;
};

export type VascularSurgeonsContact_List = {
  __typename?: 'VascularSurgeonsContact_list';
  name?: Maybe<Scalars['String']>;
  specialist?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  contact_details?: Maybe<Scalars['String']>;
};

export type VascularSurgeons = Node & Document & {
  __typename?: 'VascularSurgeons';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_list?: Maybe<Array<Maybe<VascularSurgeonsContact_List>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type VascularSurgeonsContact_ListFilter = {
  name?: InputMaybe<StringFilter>;
  specialist?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  contact_details?: InputMaybe<StringFilter>;
};

export type VascularSurgeonsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_list?: InputMaybe<VascularSurgeonsContact_ListFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type VascularSurgeonsConnectionEdges = {
  __typename?: 'VascularSurgeonsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<VascularSurgeons>;
};

export type VascularSurgeonsConnection = Connection & {
  __typename?: 'VascularSurgeonsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<VascularSurgeonsConnectionEdges>>>;
};

export type Faq = Node & Document & {
  __typename?: 'Faq';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type FaqFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type FaqConnectionEdges = {
  __typename?: 'FaqConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Faq>;
};

export type FaqConnection = Connection & {
  __typename?: 'FaqConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<FaqConnectionEdges>>>;
};

export type ContactContact_Items = {
  __typename?: 'ContactContact_items';
  name?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type Contact = Node & Document & {
  __typename?: 'Contact';
  draft?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  layout?: Maybe<Scalars['String']>;
  contact_items?: Maybe<Array<Maybe<ContactContact_Items>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ContactContact_ItemsFilter = {
  name?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
};

export type ContactFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  contact_items?: InputMaybe<ContactContact_ItemsFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ContactConnectionEdges = {
  __typename?: 'ContactConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Contact>;
};

export type ContactConnection = Connection & {
  __typename?: 'ContactConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ContactConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateHomepage: Homepage;
  createHomepage: Homepage;
  updateAuthor: Author;
  createAuthor: Author;
  updatePosts: Posts;
  createPosts: Posts;
  updateEmergency_contacts: Emergency_Contacts;
  createEmergency_contacts: Emergency_Contacts;
  updateAbout: About;
  createAbout: About;
  updateBloodBanks: BloodBanks;
  createBloodBanks: BloodBanks;
  updateDialysisCenters: DialysisCenters;
  createDialysisCenters: DialysisCenters;
  updateHospitals: Hospitals;
  createHospitals: Hospitals;
  updateNephrologyDoctors: NephrologyDoctors;
  createNephrologyDoctors: NephrologyDoctors;
  updateUrologyDoctors: UrologyDoctors;
  createUrologyDoctors: UrologyDoctors;
  updateVascularSurgeons: VascularSurgeons;
  createVascularSurgeons: VascularSurgeons;
  updateFaq: Faq;
  createFaq: Faq;
  updateContact: Contact;
  createContact: Contact;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateHomepageArgs = {
  relativePath: Scalars['String'];
  params: HomepageMutation;
};


export type MutationCreateHomepageArgs = {
  relativePath: Scalars['String'];
  params: HomepageMutation;
};


export type MutationUpdateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationCreateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationUpdatePostsArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationCreatePostsArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationUpdateEmergency_ContactsArgs = {
  relativePath: Scalars['String'];
  params: Emergency_ContactsMutation;
};


export type MutationCreateEmergency_ContactsArgs = {
  relativePath: Scalars['String'];
  params: Emergency_ContactsMutation;
};


export type MutationUpdateAboutArgs = {
  relativePath: Scalars['String'];
  params: AboutMutation;
};


export type MutationCreateAboutArgs = {
  relativePath: Scalars['String'];
  params: AboutMutation;
};


export type MutationUpdateBloodBanksArgs = {
  relativePath: Scalars['String'];
  params: BloodBanksMutation;
};


export type MutationCreateBloodBanksArgs = {
  relativePath: Scalars['String'];
  params: BloodBanksMutation;
};


export type MutationUpdateDialysisCentersArgs = {
  relativePath: Scalars['String'];
  params: DialysisCentersMutation;
};


export type MutationCreateDialysisCentersArgs = {
  relativePath: Scalars['String'];
  params: DialysisCentersMutation;
};


export type MutationUpdateHospitalsArgs = {
  relativePath: Scalars['String'];
  params: HospitalsMutation;
};


export type MutationCreateHospitalsArgs = {
  relativePath: Scalars['String'];
  params: HospitalsMutation;
};


export type MutationUpdateNephrologyDoctorsArgs = {
  relativePath: Scalars['String'];
  params: NephrologyDoctorsMutation;
};


export type MutationCreateNephrologyDoctorsArgs = {
  relativePath: Scalars['String'];
  params: NephrologyDoctorsMutation;
};


export type MutationUpdateUrologyDoctorsArgs = {
  relativePath: Scalars['String'];
  params: UrologyDoctorsMutation;
};


export type MutationCreateUrologyDoctorsArgs = {
  relativePath: Scalars['String'];
  params: UrologyDoctorsMutation;
};


export type MutationUpdateVascularSurgeonsArgs = {
  relativePath: Scalars['String'];
  params: VascularSurgeonsMutation;
};


export type MutationCreateVascularSurgeonsArgs = {
  relativePath: Scalars['String'];
  params: VascularSurgeonsMutation;
};


export type MutationUpdateFaqArgs = {
  relativePath: Scalars['String'];
  params: FaqMutation;
};


export type MutationCreateFaqArgs = {
  relativePath: Scalars['String'];
  params: FaqMutation;
};


export type MutationUpdateContactArgs = {
  relativePath: Scalars['String'];
  params: ContactMutation;
};


export type MutationCreateContactArgs = {
  relativePath: Scalars['String'];
  params: ContactMutation;
};

export type DocumentUpdateMutation = {
  homepage?: InputMaybe<HomepageMutation>;
  author?: InputMaybe<AuthorMutation>;
  posts?: InputMaybe<PostsMutation>;
  emergency_contacts?: InputMaybe<Emergency_ContactsMutation>;
  about?: InputMaybe<AboutMutation>;
  bloodBanks?: InputMaybe<BloodBanksMutation>;
  dialysisCenters?: InputMaybe<DialysisCentersMutation>;
  hospitals?: InputMaybe<HospitalsMutation>;
  nephrologyDoctors?: InputMaybe<NephrologyDoctorsMutation>;
  urologyDoctors?: InputMaybe<UrologyDoctorsMutation>;
  vascularSurgeons?: InputMaybe<VascularSurgeonsMutation>;
  faq?: InputMaybe<FaqMutation>;
  contact?: InputMaybe<ContactMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  homepage?: InputMaybe<HomepageMutation>;
  author?: InputMaybe<AuthorMutation>;
  posts?: InputMaybe<PostsMutation>;
  emergency_contacts?: InputMaybe<Emergency_ContactsMutation>;
  about?: InputMaybe<AboutMutation>;
  bloodBanks?: InputMaybe<BloodBanksMutation>;
  dialysisCenters?: InputMaybe<DialysisCentersMutation>;
  hospitals?: InputMaybe<HospitalsMutation>;
  nephrologyDoctors?: InputMaybe<NephrologyDoctorsMutation>;
  urologyDoctors?: InputMaybe<UrologyDoctorsMutation>;
  vascularSurgeons?: InputMaybe<VascularSurgeonsMutation>;
  faq?: InputMaybe<FaqMutation>;
  contact?: InputMaybe<ContactMutation>;
};

export type HomepageBannerMutation = {
  title?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  color?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
};

export type HomepageNoticeMutation = {
  enable?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
};

export type HomepageMutation = {
  banner?: InputMaybe<Array<InputMaybe<HomepageBannerMutation>>>;
  notice?: InputMaybe<HomepageNoticeMutation>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type AuthorMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type PostsMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type Emergency_ContactsMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type AboutMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type BloodBanksContact_ListMutation = {
  name?: InputMaybe<Scalars['String']>;
  specialist?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  contact_details?: InputMaybe<Scalars['String']>;
};

export type BloodBanksMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_list?: InputMaybe<Array<InputMaybe<BloodBanksContact_ListMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type DialysisCentersContact_ListMutation = {
  name?: InputMaybe<Scalars['String']>;
  specialist?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  contact_details?: InputMaybe<Scalars['String']>;
};

export type DialysisCentersMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_list?: InputMaybe<Array<InputMaybe<DialysisCentersContact_ListMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type HospitalsContact_ListMutation = {
  name?: InputMaybe<Scalars['String']>;
  specialist?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  contact_details?: InputMaybe<Scalars['String']>;
};

export type HospitalsMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_list?: InputMaybe<Array<InputMaybe<HospitalsContact_ListMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type NephrologyDoctorsContact_ListMutation = {
  name?: InputMaybe<Scalars['String']>;
  specialist?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  contact_details?: InputMaybe<Scalars['String']>;
};

export type NephrologyDoctorsMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_list?: InputMaybe<Array<InputMaybe<NephrologyDoctorsContact_ListMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type UrologyDoctorsContact_ListMutation = {
  name?: InputMaybe<Scalars['String']>;
  specialist?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  contact_details?: InputMaybe<Scalars['String']>;
};

export type UrologyDoctorsMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_list?: InputMaybe<Array<InputMaybe<UrologyDoctorsContact_ListMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type VascularSurgeonsContact_ListMutation = {
  name?: InputMaybe<Scalars['String']>;
  specialist?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  contact_details?: InputMaybe<Scalars['String']>;
};

export type VascularSurgeonsMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_list?: InputMaybe<Array<InputMaybe<VascularSurgeonsContact_ListMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type FaqMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type ContactContact_ItemsMutation = {
  name?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
};

export type ContactMutation = {
  draft?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<Scalars['String']>;
  contact_items?: InputMaybe<Array<InputMaybe<ContactContact_ItemsMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type HomepagePartsFragment = { __typename?: 'Homepage', body?: any | null, banner?: Array<{ __typename: 'HomepageBanner', title?: string | null, image?: string | null, color?: string | null, content?: string | null } | null> | null, notice?: { __typename: 'HomepageNotice', enable?: boolean | null, title?: string | null, content?: string | null } | null };

export type AuthorPartsFragment = { __typename?: 'Author', draft?: boolean | null, title?: string | null, image?: string | null, bio?: string | null, phone?: string | null, email?: string | null, address?: string | null, body?: any | null };

export type PostsPartsFragment = { __typename?: 'Posts', draft?: boolean | null, title?: string | null, date?: string | null, description?: string | null, image?: string | null, body?: any | null };

export type Emergency_ContactsPartsFragment = { __typename?: 'Emergency_contacts', draft?: boolean | null, title?: string | null, body?: any | null };

export type AboutPartsFragment = { __typename?: 'About', draft?: boolean | null, title?: string | null, image?: string | null, description?: string | null, body?: any | null };

export type BloodBanksPartsFragment = { __typename?: 'BloodBanks', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_list?: Array<{ __typename: 'BloodBanksContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null };

export type DialysisCentersPartsFragment = { __typename?: 'DialysisCenters', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_list?: Array<{ __typename: 'DialysisCentersContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null };

export type HospitalsPartsFragment = { __typename?: 'Hospitals', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_list?: Array<{ __typename: 'HospitalsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null };

export type NephrologyDoctorsPartsFragment = { __typename?: 'NephrologyDoctors', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_list?: Array<{ __typename: 'NephrologyDoctorsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null };

export type UrologyDoctorsPartsFragment = { __typename?: 'UrologyDoctors', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_list?: Array<{ __typename: 'UrologyDoctorsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null };

export type VascularSurgeonsPartsFragment = { __typename?: 'VascularSurgeons', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_list?: Array<{ __typename: 'VascularSurgeonsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null };

export type FaqPartsFragment = { __typename?: 'Faq', draft?: boolean | null, title?: string | null, layout?: string | null, description?: string | null, body?: any | null };

export type ContactPartsFragment = { __typename?: 'Contact', draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, contact_items?: Array<{ __typename: 'ContactContact_items', name?: string | null, icon?: string | null, content?: string | null } | null> | null };

export type HomepageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type HomepageQuery = { __typename?: 'Query', homepage: { __typename?: 'Homepage', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, banner?: Array<{ __typename: 'HomepageBanner', title?: string | null, image?: string | null, color?: string | null, content?: string | null } | null> | null, notice?: { __typename: 'HomepageNotice', enable?: boolean | null, title?: string | null, content?: string | null } | null } };

export type HomepageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HomepageFilter>;
}>;


export type HomepageConnectionQuery = { __typename?: 'Query', homepageConnection: { __typename?: 'HomepageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomepageConnectionEdges', cursor: string, node?: { __typename?: 'Homepage', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, banner?: Array<{ __typename: 'HomepageBanner', title?: string | null, image?: string | null, color?: string | null, content?: string | null } | null> | null, notice?: { __typename: 'HomepageNotice', enable?: boolean | null, title?: string | null, content?: string | null } | null } | null } | null> | null } };

export type AuthorQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type AuthorQuery = { __typename?: 'Query', author: { __typename?: 'Author', id: string, draft?: boolean | null, title?: string | null, image?: string | null, bio?: string | null, phone?: string | null, email?: string | null, address?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AuthorConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
}>;


export type AuthorConnectionQuery = { __typename?: 'Query', authorConnection: { __typename?: 'AuthorConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AuthorConnectionEdges', cursor: string, node?: { __typename?: 'Author', id: string, draft?: boolean | null, title?: string | null, image?: string | null, bio?: string | null, phone?: string | null, email?: string | null, address?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PostsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PostsQuery = { __typename?: 'Query', posts: { __typename?: 'Posts', id: string, draft?: boolean | null, title?: string | null, date?: string | null, description?: string | null, image?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PostsFilter>;
}>;


export type PostsConnectionQuery = { __typename?: 'Query', postsConnection: { __typename?: 'PostsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostsConnectionEdges', cursor: string, node?: { __typename?: 'Posts', id: string, draft?: boolean | null, title?: string | null, date?: string | null, description?: string | null, image?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Emergency_ContactsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type Emergency_ContactsQuery = { __typename?: 'Query', emergency_contacts: { __typename?: 'Emergency_contacts', id: string, draft?: boolean | null, title?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Emergency_ContactsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<Emergency_ContactsFilter>;
}>;


export type Emergency_ContactsConnectionQuery = { __typename?: 'Query', emergency_contactsConnection: { __typename?: 'Emergency_contactsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Emergency_contactsConnectionEdges', cursor: string, node?: { __typename?: 'Emergency_contacts', id: string, draft?: boolean | null, title?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type AboutQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type AboutQuery = { __typename?: 'Query', about: { __typename?: 'About', id: string, draft?: boolean | null, title?: string | null, image?: string | null, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AboutConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AboutFilter>;
}>;


export type AboutConnectionQuery = { __typename?: 'Query', aboutConnection: { __typename?: 'AboutConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AboutConnectionEdges', cursor: string, node?: { __typename?: 'About', id: string, draft?: boolean | null, title?: string | null, image?: string | null, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type BloodBanksQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type BloodBanksQuery = { __typename?: 'Query', bloodBanks: { __typename?: 'BloodBanks', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'BloodBanksContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } };

export type BloodBanksConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<BloodBanksFilter>;
}>;


export type BloodBanksConnectionQuery = { __typename?: 'Query', bloodBanksConnection: { __typename?: 'BloodBanksConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BloodBanksConnectionEdges', cursor: string, node?: { __typename?: 'BloodBanks', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'BloodBanksContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } | null } | null> | null } };

export type DialysisCentersQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type DialysisCentersQuery = { __typename?: 'Query', dialysisCenters: { __typename?: 'DialysisCenters', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'DialysisCentersContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } };

export type DialysisCentersConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DialysisCentersFilter>;
}>;


export type DialysisCentersConnectionQuery = { __typename?: 'Query', dialysisCentersConnection: { __typename?: 'DialysisCentersConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'DialysisCentersConnectionEdges', cursor: string, node?: { __typename?: 'DialysisCenters', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'DialysisCentersContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } | null } | null> | null } };

export type HospitalsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type HospitalsQuery = { __typename?: 'Query', hospitals: { __typename?: 'Hospitals', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'HospitalsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } };

export type HospitalsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<HospitalsFilter>;
}>;


export type HospitalsConnectionQuery = { __typename?: 'Query', hospitalsConnection: { __typename?: 'HospitalsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HospitalsConnectionEdges', cursor: string, node?: { __typename?: 'Hospitals', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'HospitalsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } | null } | null> | null } };

export type NephrologyDoctorsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type NephrologyDoctorsQuery = { __typename?: 'Query', nephrologyDoctors: { __typename?: 'NephrologyDoctors', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'NephrologyDoctorsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } };

export type NephrologyDoctorsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<NephrologyDoctorsFilter>;
}>;


export type NephrologyDoctorsConnectionQuery = { __typename?: 'Query', nephrologyDoctorsConnection: { __typename?: 'NephrologyDoctorsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NephrologyDoctorsConnectionEdges', cursor: string, node?: { __typename?: 'NephrologyDoctors', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'NephrologyDoctorsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } | null } | null> | null } };

export type UrologyDoctorsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type UrologyDoctorsQuery = { __typename?: 'Query', urologyDoctors: { __typename?: 'UrologyDoctors', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'UrologyDoctorsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } };

export type UrologyDoctorsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<UrologyDoctorsFilter>;
}>;


export type UrologyDoctorsConnectionQuery = { __typename?: 'Query', urologyDoctorsConnection: { __typename?: 'UrologyDoctorsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'UrologyDoctorsConnectionEdges', cursor: string, node?: { __typename?: 'UrologyDoctors', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'UrologyDoctorsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } | null } | null> | null } };

export type VascularSurgeonsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type VascularSurgeonsQuery = { __typename?: 'Query', vascularSurgeons: { __typename?: 'VascularSurgeons', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'VascularSurgeonsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } };

export type VascularSurgeonsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<VascularSurgeonsFilter>;
}>;


export type VascularSurgeonsConnectionQuery = { __typename?: 'Query', vascularSurgeonsConnection: { __typename?: 'VascularSurgeonsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'VascularSurgeonsConnectionEdges', cursor: string, node?: { __typename?: 'VascularSurgeons', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_list?: Array<{ __typename: 'VascularSurgeonsContact_list', name?: string | null, specialist?: string | null, location?: string | null, contact_details?: string | null } | null> | null } | null } | null> | null } };

export type FaqQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type FaqQuery = { __typename?: 'Query', faq: { __typename?: 'Faq', id: string, draft?: boolean | null, title?: string | null, layout?: string | null, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type FaqConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<FaqFilter>;
}>;


export type FaqConnectionQuery = { __typename?: 'Query', faqConnection: { __typename?: 'FaqConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FaqConnectionEdges', cursor: string, node?: { __typename?: 'Faq', id: string, draft?: boolean | null, title?: string | null, layout?: string | null, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ContactQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ContactQuery = { __typename?: 'Query', contact: { __typename?: 'Contact', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_items?: Array<{ __typename: 'ContactContact_items', name?: string | null, icon?: string | null, content?: string | null } | null> | null } };

export type ContactConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ContactFilter>;
}>;


export type ContactConnectionQuery = { __typename?: 'Query', contactConnection: { __typename?: 'ContactConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContactConnectionEdges', cursor: string, node?: { __typename?: 'Contact', id: string, draft?: boolean | null, title?: string | null, description?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact_items?: Array<{ __typename: 'ContactContact_items', name?: string | null, icon?: string | null, content?: string | null } | null> | null } | null } | null> | null } };

export const HomepagePartsFragmentDoc = gql`
    fragment HomepageParts on Homepage {
  banner {
    __typename
    title
    image
    color
    content
  }
  notice {
    __typename
    enable
    title
    content
  }
  body
}
    `;
export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  draft
  title
  image
  bio
  phone
  email
  address
  body
}
    `;
export const PostsPartsFragmentDoc = gql`
    fragment PostsParts on Posts {
  draft
  title
  date
  description
  image
  body
}
    `;
export const Emergency_ContactsPartsFragmentDoc = gql`
    fragment Emergency_contactsParts on Emergency_contacts {
  draft
  title
  body
}
    `;
export const AboutPartsFragmentDoc = gql`
    fragment AboutParts on About {
  draft
  title
  image
  description
  body
}
    `;
export const BloodBanksPartsFragmentDoc = gql`
    fragment BloodBanksParts on BloodBanks {
  draft
  title
  description
  layout
  contact_list {
    __typename
    name
    specialist
    location
    contact_details
  }
  body
}
    `;
export const DialysisCentersPartsFragmentDoc = gql`
    fragment DialysisCentersParts on DialysisCenters {
  draft
  title
  description
  layout
  contact_list {
    __typename
    name
    specialist
    location
    contact_details
  }
  body
}
    `;
export const HospitalsPartsFragmentDoc = gql`
    fragment HospitalsParts on Hospitals {
  draft
  title
  description
  layout
  contact_list {
    __typename
    name
    specialist
    location
    contact_details
  }
  body
}
    `;
export const NephrologyDoctorsPartsFragmentDoc = gql`
    fragment NephrologyDoctorsParts on NephrologyDoctors {
  draft
  title
  description
  layout
  contact_list {
    __typename
    name
    specialist
    location
    contact_details
  }
  body
}
    `;
export const UrologyDoctorsPartsFragmentDoc = gql`
    fragment UrologyDoctorsParts on UrologyDoctors {
  draft
  title
  description
  layout
  contact_list {
    __typename
    name
    specialist
    location
    contact_details
  }
  body
}
    `;
export const VascularSurgeonsPartsFragmentDoc = gql`
    fragment VascularSurgeonsParts on VascularSurgeons {
  draft
  title
  description
  layout
  contact_list {
    __typename
    name
    specialist
    location
    contact_details
  }
  body
}
    `;
export const FaqPartsFragmentDoc = gql`
    fragment FaqParts on Faq {
  draft
  title
  layout
  description
  body
}
    `;
export const ContactPartsFragmentDoc = gql`
    fragment ContactParts on Contact {
  draft
  title
  description
  layout
  contact_items {
    __typename
    name
    icon
    content
  }
  body
}
    `;
export const HomepageDocument = gql`
    query homepage($relativePath: String!) {
  homepage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomepageParts
  }
}
    ${HomepagePartsFragmentDoc}`;
export const HomepageConnectionDocument = gql`
    query homepageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomepageFilter) {
  homepageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomepageParts
      }
    }
  }
}
    ${HomepagePartsFragmentDoc}`;
export const AuthorDocument = gql`
    query author($relativePath: String!) {
  author(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorParts
  }
}
    ${AuthorPartsFragmentDoc}`;
export const AuthorConnectionDocument = gql`
    query authorConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AuthorFilter) {
  authorConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorParts
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const PostsDocument = gql`
    query posts($relativePath: String!) {
  posts(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostsParts
  }
}
    ${PostsPartsFragmentDoc}`;
export const PostsConnectionDocument = gql`
    query postsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostsFilter) {
  postsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostsParts
      }
    }
  }
}
    ${PostsPartsFragmentDoc}`;
export const Emergency_ContactsDocument = gql`
    query emergency_contacts($relativePath: String!) {
  emergency_contacts(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Emergency_contactsParts
  }
}
    ${Emergency_ContactsPartsFragmentDoc}`;
export const Emergency_ContactsConnectionDocument = gql`
    query emergency_contactsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Emergency_contactsFilter) {
  emergency_contactsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Emergency_contactsParts
      }
    }
  }
}
    ${Emergency_ContactsPartsFragmentDoc}`;
export const AboutDocument = gql`
    query about($relativePath: String!) {
  about(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AboutParts
  }
}
    ${AboutPartsFragmentDoc}`;
export const AboutConnectionDocument = gql`
    query aboutConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AboutFilter) {
  aboutConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AboutParts
      }
    }
  }
}
    ${AboutPartsFragmentDoc}`;
export const BloodBanksDocument = gql`
    query bloodBanks($relativePath: String!) {
  bloodBanks(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BloodBanksParts
  }
}
    ${BloodBanksPartsFragmentDoc}`;
export const BloodBanksConnectionDocument = gql`
    query bloodBanksConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BloodBanksFilter) {
  bloodBanksConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BloodBanksParts
      }
    }
  }
}
    ${BloodBanksPartsFragmentDoc}`;
export const DialysisCentersDocument = gql`
    query dialysisCenters($relativePath: String!) {
  dialysisCenters(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DialysisCentersParts
  }
}
    ${DialysisCentersPartsFragmentDoc}`;
export const DialysisCentersConnectionDocument = gql`
    query dialysisCentersConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: DialysisCentersFilter) {
  dialysisCentersConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DialysisCentersParts
      }
    }
  }
}
    ${DialysisCentersPartsFragmentDoc}`;
export const HospitalsDocument = gql`
    query hospitals($relativePath: String!) {
  hospitals(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HospitalsParts
  }
}
    ${HospitalsPartsFragmentDoc}`;
export const HospitalsConnectionDocument = gql`
    query hospitalsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HospitalsFilter) {
  hospitalsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HospitalsParts
      }
    }
  }
}
    ${HospitalsPartsFragmentDoc}`;
export const NephrologyDoctorsDocument = gql`
    query nephrologyDoctors($relativePath: String!) {
  nephrologyDoctors(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NephrologyDoctorsParts
  }
}
    ${NephrologyDoctorsPartsFragmentDoc}`;
export const NephrologyDoctorsConnectionDocument = gql`
    query nephrologyDoctorsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NephrologyDoctorsFilter) {
  nephrologyDoctorsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NephrologyDoctorsParts
      }
    }
  }
}
    ${NephrologyDoctorsPartsFragmentDoc}`;
export const UrologyDoctorsDocument = gql`
    query urologyDoctors($relativePath: String!) {
  urologyDoctors(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...UrologyDoctorsParts
  }
}
    ${UrologyDoctorsPartsFragmentDoc}`;
export const UrologyDoctorsConnectionDocument = gql`
    query urologyDoctorsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: UrologyDoctorsFilter) {
  urologyDoctorsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...UrologyDoctorsParts
      }
    }
  }
}
    ${UrologyDoctorsPartsFragmentDoc}`;
export const VascularSurgeonsDocument = gql`
    query vascularSurgeons($relativePath: String!) {
  vascularSurgeons(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...VascularSurgeonsParts
  }
}
    ${VascularSurgeonsPartsFragmentDoc}`;
export const VascularSurgeonsConnectionDocument = gql`
    query vascularSurgeonsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: VascularSurgeonsFilter) {
  vascularSurgeonsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...VascularSurgeonsParts
      }
    }
  }
}
    ${VascularSurgeonsPartsFragmentDoc}`;
export const FaqDocument = gql`
    query faq($relativePath: String!) {
  faq(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FaqParts
  }
}
    ${FaqPartsFragmentDoc}`;
export const FaqConnectionDocument = gql`
    query faqConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FaqFilter) {
  faqConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FaqParts
      }
    }
  }
}
    ${FaqPartsFragmentDoc}`;
export const ContactDocument = gql`
    query contact($relativePath: String!) {
  contact(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContactParts
  }
}
    ${ContactPartsFragmentDoc}`;
export const ContactConnectionDocument = gql`
    query contactConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContactFilter) {
  contactConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContactParts
      }
    }
  }
}
    ${ContactPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      homepage(variables: HomepageQueryVariables, options?: C): Promise<{data: HomepageQuery, variables: HomepageQueryVariables, query: string}> {
        return requester<{data: HomepageQuery, variables: HomepageQueryVariables, query: string}, HomepageQueryVariables>(HomepageDocument, variables, options);
      },
    homepageConnection(variables?: HomepageConnectionQueryVariables, options?: C): Promise<{data: HomepageConnectionQuery, variables: HomepageConnectionQueryVariables, query: string}> {
        return requester<{data: HomepageConnectionQuery, variables: HomepageConnectionQueryVariables, query: string}, HomepageConnectionQueryVariables>(HomepageConnectionDocument, variables, options);
      },
    author(variables: AuthorQueryVariables, options?: C): Promise<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}> {
        return requester<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}, AuthorQueryVariables>(AuthorDocument, variables, options);
      },
    authorConnection(variables?: AuthorConnectionQueryVariables, options?: C): Promise<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}, AuthorConnectionQueryVariables>(AuthorConnectionDocument, variables, options);
      },
    posts(variables: PostsQueryVariables, options?: C): Promise<{data: PostsQuery, variables: PostsQueryVariables, query: string}> {
        return requester<{data: PostsQuery, variables: PostsQueryVariables, query: string}, PostsQueryVariables>(PostsDocument, variables, options);
      },
    postsConnection(variables?: PostsConnectionQueryVariables, options?: C): Promise<{data: PostsConnectionQuery, variables: PostsConnectionQueryVariables, query: string}> {
        return requester<{data: PostsConnectionQuery, variables: PostsConnectionQueryVariables, query: string}, PostsConnectionQueryVariables>(PostsConnectionDocument, variables, options);
      },
    emergency_contacts(variables: Emergency_ContactsQueryVariables, options?: C): Promise<{data: Emergency_ContactsQuery, variables: Emergency_ContactsQueryVariables, query: string}> {
        return requester<{data: Emergency_ContactsQuery, variables: Emergency_ContactsQueryVariables, query: string}, Emergency_ContactsQueryVariables>(Emergency_ContactsDocument, variables, options);
      },
    emergency_contactsConnection(variables?: Emergency_ContactsConnectionQueryVariables, options?: C): Promise<{data: Emergency_ContactsConnectionQuery, variables: Emergency_ContactsConnectionQueryVariables, query: string}> {
        return requester<{data: Emergency_ContactsConnectionQuery, variables: Emergency_ContactsConnectionQueryVariables, query: string}, Emergency_ContactsConnectionQueryVariables>(Emergency_ContactsConnectionDocument, variables, options);
      },
    about(variables: AboutQueryVariables, options?: C): Promise<{data: AboutQuery, variables: AboutQueryVariables, query: string}> {
        return requester<{data: AboutQuery, variables: AboutQueryVariables, query: string}, AboutQueryVariables>(AboutDocument, variables, options);
      },
    aboutConnection(variables?: AboutConnectionQueryVariables, options?: C): Promise<{data: AboutConnectionQuery, variables: AboutConnectionQueryVariables, query: string}> {
        return requester<{data: AboutConnectionQuery, variables: AboutConnectionQueryVariables, query: string}, AboutConnectionQueryVariables>(AboutConnectionDocument, variables, options);
      },
    bloodBanks(variables: BloodBanksQueryVariables, options?: C): Promise<{data: BloodBanksQuery, variables: BloodBanksQueryVariables, query: string}> {
        return requester<{data: BloodBanksQuery, variables: BloodBanksQueryVariables, query: string}, BloodBanksQueryVariables>(BloodBanksDocument, variables, options);
      },
    bloodBanksConnection(variables?: BloodBanksConnectionQueryVariables, options?: C): Promise<{data: BloodBanksConnectionQuery, variables: BloodBanksConnectionQueryVariables, query: string}> {
        return requester<{data: BloodBanksConnectionQuery, variables: BloodBanksConnectionQueryVariables, query: string}, BloodBanksConnectionQueryVariables>(BloodBanksConnectionDocument, variables, options);
      },
    dialysisCenters(variables: DialysisCentersQueryVariables, options?: C): Promise<{data: DialysisCentersQuery, variables: DialysisCentersQueryVariables, query: string}> {
        return requester<{data: DialysisCentersQuery, variables: DialysisCentersQueryVariables, query: string}, DialysisCentersQueryVariables>(DialysisCentersDocument, variables, options);
      },
    dialysisCentersConnection(variables?: DialysisCentersConnectionQueryVariables, options?: C): Promise<{data: DialysisCentersConnectionQuery, variables: DialysisCentersConnectionQueryVariables, query: string}> {
        return requester<{data: DialysisCentersConnectionQuery, variables: DialysisCentersConnectionQueryVariables, query: string}, DialysisCentersConnectionQueryVariables>(DialysisCentersConnectionDocument, variables, options);
      },
    hospitals(variables: HospitalsQueryVariables, options?: C): Promise<{data: HospitalsQuery, variables: HospitalsQueryVariables, query: string}> {
        return requester<{data: HospitalsQuery, variables: HospitalsQueryVariables, query: string}, HospitalsQueryVariables>(HospitalsDocument, variables, options);
      },
    hospitalsConnection(variables?: HospitalsConnectionQueryVariables, options?: C): Promise<{data: HospitalsConnectionQuery, variables: HospitalsConnectionQueryVariables, query: string}> {
        return requester<{data: HospitalsConnectionQuery, variables: HospitalsConnectionQueryVariables, query: string}, HospitalsConnectionQueryVariables>(HospitalsConnectionDocument, variables, options);
      },
    nephrologyDoctors(variables: NephrologyDoctorsQueryVariables, options?: C): Promise<{data: NephrologyDoctorsQuery, variables: NephrologyDoctorsQueryVariables, query: string}> {
        return requester<{data: NephrologyDoctorsQuery, variables: NephrologyDoctorsQueryVariables, query: string}, NephrologyDoctorsQueryVariables>(NephrologyDoctorsDocument, variables, options);
      },
    nephrologyDoctorsConnection(variables?: NephrologyDoctorsConnectionQueryVariables, options?: C): Promise<{data: NephrologyDoctorsConnectionQuery, variables: NephrologyDoctorsConnectionQueryVariables, query: string}> {
        return requester<{data: NephrologyDoctorsConnectionQuery, variables: NephrologyDoctorsConnectionQueryVariables, query: string}, NephrologyDoctorsConnectionQueryVariables>(NephrologyDoctorsConnectionDocument, variables, options);
      },
    urologyDoctors(variables: UrologyDoctorsQueryVariables, options?: C): Promise<{data: UrologyDoctorsQuery, variables: UrologyDoctorsQueryVariables, query: string}> {
        return requester<{data: UrologyDoctorsQuery, variables: UrologyDoctorsQueryVariables, query: string}, UrologyDoctorsQueryVariables>(UrologyDoctorsDocument, variables, options);
      },
    urologyDoctorsConnection(variables?: UrologyDoctorsConnectionQueryVariables, options?: C): Promise<{data: UrologyDoctorsConnectionQuery, variables: UrologyDoctorsConnectionQueryVariables, query: string}> {
        return requester<{data: UrologyDoctorsConnectionQuery, variables: UrologyDoctorsConnectionQueryVariables, query: string}, UrologyDoctorsConnectionQueryVariables>(UrologyDoctorsConnectionDocument, variables, options);
      },
    vascularSurgeons(variables: VascularSurgeonsQueryVariables, options?: C): Promise<{data: VascularSurgeonsQuery, variables: VascularSurgeonsQueryVariables, query: string}> {
        return requester<{data: VascularSurgeonsQuery, variables: VascularSurgeonsQueryVariables, query: string}, VascularSurgeonsQueryVariables>(VascularSurgeonsDocument, variables, options);
      },
    vascularSurgeonsConnection(variables?: VascularSurgeonsConnectionQueryVariables, options?: C): Promise<{data: VascularSurgeonsConnectionQuery, variables: VascularSurgeonsConnectionQueryVariables, query: string}> {
        return requester<{data: VascularSurgeonsConnectionQuery, variables: VascularSurgeonsConnectionQueryVariables, query: string}, VascularSurgeonsConnectionQueryVariables>(VascularSurgeonsConnectionDocument, variables, options);
      },
    faq(variables: FaqQueryVariables, options?: C): Promise<{data: FaqQuery, variables: FaqQueryVariables, query: string}> {
        return requester<{data: FaqQuery, variables: FaqQueryVariables, query: string}, FaqQueryVariables>(FaqDocument, variables, options);
      },
    faqConnection(variables?: FaqConnectionQueryVariables, options?: C): Promise<{data: FaqConnectionQuery, variables: FaqConnectionQueryVariables, query: string}> {
        return requester<{data: FaqConnectionQuery, variables: FaqConnectionQueryVariables, query: string}, FaqConnectionQueryVariables>(FaqConnectionDocument, variables, options);
      },
    contact(variables: ContactQueryVariables, options?: C): Promise<{data: ContactQuery, variables: ContactQueryVariables, query: string}> {
        return requester<{data: ContactQuery, variables: ContactQueryVariables, query: string}, ContactQueryVariables>(ContactDocument, variables, options);
      },
    contactConnection(variables?: ContactConnectionQueryVariables, options?: C): Promise<{data: ContactConnectionQuery, variables: ContactConnectionQueryVariables, query: string}> {
        return requester<{data: ContactConnectionQuery, variables: ContactConnectionQueryVariables, query: string}, ContactConnectionQueryVariables>(ContactConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  