# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  homepage(relativePath: String): Homepage!
  homepageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomepageFilter): HomepageConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostsFilter): PostsConnection!
  emergency_contacts(relativePath: String): Emergency_contacts!
  emergency_contactsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Emergency_contactsFilter): Emergency_contactsConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  bloodBanks(relativePath: String): BloodBanks!
  bloodBanksConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BloodBanksFilter): BloodBanksConnection!
  dialysisCenters(relativePath: String): DialysisCenters!
  dialysisCentersConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DialysisCentersFilter): DialysisCentersConnection!
  hospitals(relativePath: String): Hospitals!
  hospitalsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HospitalsFilter): HospitalsConnection!
  nephrologyDoctors(relativePath: String): NephrologyDoctors!
  nephrologyDoctorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NephrologyDoctorsFilter): NephrologyDoctorsConnection!
  urologyDoctors(relativePath: String): UrologyDoctors!
  urologyDoctorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: UrologyDoctorsFilter): UrologyDoctorsConnection!
  vascularSurgeons(relativePath: String): VascularSurgeons!
  vascularSurgeonsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: VascularSurgeonsFilter): VascularSurgeonsConnection!
  faq(relativePath: String): Faq!
  faqConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FaqFilter): FaqConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
}

input DocumentFilter {
  homepage: HomepageFilter
  author: AuthorFilter
  posts: PostsFilter
  emergency_contacts: Emergency_contactsFilter
  about: AboutFilter
  bloodBanks: BloodBanksFilter
  dialysisCenters: DialysisCentersFilter
  hospitals: HospitalsFilter
  nephrologyDoctors: NephrologyDoctorsFilter
  urologyDoctors: UrologyDoctorsFilter
  vascularSurgeons: VascularSurgeonsFilter
  faq: FaqFilter
  contact: ContactFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Homepage | Author | Posts | Emergency_contacts | About | BloodBanks | DialysisCenters | Hospitals | NephrologyDoctors | UrologyDoctors | VascularSurgeons | Faq | Contact | Folder

type HomepageBanner {
  title: String
  image: String
  color: String
  content: String
}

type HomepageNotice {
  enable: Boolean
  title: String
  content: String
}

type Homepage implements Node & Document {
  banner: [HomepageBanner]
  notice: HomepageNotice
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomepageBannerFilter {
  title: StringFilter
  image: StringFilter
  color: StringFilter
  content: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input HomepageNoticeFilter {
  enable: BooleanFilter
  title: StringFilter
  content: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input HomepageFilter {
  banner: HomepageBannerFilter
  notice: HomepageNoticeFilter
  body: RichTextFilter
}

type HomepageConnectionEdges {
  cursor: String!
  node: Homepage
}

type HomepageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomepageConnectionEdges]
}

type Author implements Node & Document {
  draft: Boolean
  title: String
  image: String
  bio: String
  phone: String
  email: String
  address: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input AuthorFilter {
  draft: BooleanFilter
  title: StringFilter
  image: ImageFilter
  bio: StringFilter
  phone: StringFilter
  email: StringFilter
  address: StringFilter
  body: RichTextFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type Posts implements Node & Document {
  draft: Boolean
  title: String
  date: String
  description: String
  image: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostsFilter {
  draft: BooleanFilter
  title: StringFilter
  date: DatetimeFilter
  description: StringFilter
  image: ImageFilter
  body: RichTextFilter
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type Emergency_contacts implements Node & Document {
  draft: Boolean
  title: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Emergency_contactsFilter {
  draft: BooleanFilter
  title: StringFilter
  body: RichTextFilter
}

type Emergency_contactsConnectionEdges {
  cursor: String!
  node: Emergency_contacts
}

type Emergency_contactsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Emergency_contactsConnectionEdges]
}

type About implements Node & Document {
  draft: Boolean
  title: String
  image: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutBodyMembersFilter

input AboutBodyFilter {
  members: AboutBodyMembersFilter
}

input AboutFilter {
  draft: BooleanFilter
  title: StringFilter
  image: ImageFilter
  description: StringFilter
  body: AboutBodyFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type BloodBanksContact_list {
  name: String
  specialist: String
  location: String
  contact_details: String
}

type BloodBanks implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [BloodBanksContact_list]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BloodBanksContact_listFilter {
  name: StringFilter
  specialist: StringFilter
  location: StringFilter
  contact_details: StringFilter
}

input BloodBanksFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_list: BloodBanksContact_listFilter
  body: RichTextFilter
}

type BloodBanksConnectionEdges {
  cursor: String!
  node: BloodBanks
}

type BloodBanksConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BloodBanksConnectionEdges]
}

type DialysisCentersContact_list {
  name: String
  specialist: String
  location: String
  contact_details: String
}

type DialysisCenters implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [DialysisCentersContact_list]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DialysisCentersContact_listFilter {
  name: StringFilter
  specialist: StringFilter
  location: StringFilter
  contact_details: StringFilter
}

input DialysisCentersFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_list: DialysisCentersContact_listFilter
  body: RichTextFilter
}

type DialysisCentersConnectionEdges {
  cursor: String!
  node: DialysisCenters
}

type DialysisCentersConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DialysisCentersConnectionEdges]
}

type HospitalsContact_list {
  name: String
  specialist: String
  location: String
  contact_details: String
}

type Hospitals implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [HospitalsContact_list]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HospitalsContact_listFilter {
  name: StringFilter
  specialist: StringFilter
  location: StringFilter
  contact_details: StringFilter
}

input HospitalsFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_list: HospitalsContact_listFilter
  body: RichTextFilter
}

type HospitalsConnectionEdges {
  cursor: String!
  node: Hospitals
}

type HospitalsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HospitalsConnectionEdges]
}

type NephrologyDoctorsContact_list {
  name: String
  specialist: String
  location: String
  contact_details: String
}

type NephrologyDoctors implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [NephrologyDoctorsContact_list]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NephrologyDoctorsContact_listFilter {
  name: StringFilter
  specialist: StringFilter
  location: StringFilter
  contact_details: StringFilter
}

input NephrologyDoctorsFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_list: NephrologyDoctorsContact_listFilter
  body: RichTextFilter
}

type NephrologyDoctorsConnectionEdges {
  cursor: String!
  node: NephrologyDoctors
}

type NephrologyDoctorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NephrologyDoctorsConnectionEdges]
}

type UrologyDoctorsContact_list {
  name: String
  specialist: String
  location: String
  contact_details: String
}

type UrologyDoctors implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [UrologyDoctorsContact_list]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input UrologyDoctorsContact_listFilter {
  name: StringFilter
  specialist: StringFilter
  location: StringFilter
  contact_details: StringFilter
}

input UrologyDoctorsFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_list: UrologyDoctorsContact_listFilter
  body: RichTextFilter
}

type UrologyDoctorsConnectionEdges {
  cursor: String!
  node: UrologyDoctors
}

type UrologyDoctorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [UrologyDoctorsConnectionEdges]
}

type VascularSurgeonsContact_list {
  name: String
  specialist: String
  location: String
  contact_details: String
}

type VascularSurgeons implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [VascularSurgeonsContact_list]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input VascularSurgeonsContact_listFilter {
  name: StringFilter
  specialist: StringFilter
  location: StringFilter
  contact_details: StringFilter
}

input VascularSurgeonsFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_list: VascularSurgeonsContact_listFilter
  body: RichTextFilter
}

type VascularSurgeonsConnectionEdges {
  cursor: String!
  node: VascularSurgeons
}

type VascularSurgeonsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [VascularSurgeonsConnectionEdges]
}

type Faq implements Node & Document {
  draft: Boolean
  title: String
  layout: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FaqFilter {
  draft: BooleanFilter
  title: StringFilter
  layout: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type FaqConnectionEdges {
  cursor: String!
  node: Faq
}

type FaqConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FaqConnectionEdges]
}

type ContactContact_items {
  name: String
  icon: String
  content: String
}

type Contact implements Node & Document {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_items: [ContactContact_items]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactContact_itemsFilter {
  name: StringFilter
  icon: StringFilter
  content: StringFilter
}

input ContactFilter {
  draft: BooleanFilter
  title: StringFilter
  description: StringFilter
  layout: StringFilter
  contact_items: ContactContact_itemsFilter
  body: RichTextFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  createHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
  updateEmergency_contacts(relativePath: String!, params: Emergency_contactsMutation!): Emergency_contacts!
  createEmergency_contacts(relativePath: String!, params: Emergency_contactsMutation!): Emergency_contacts!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateBloodBanks(relativePath: String!, params: BloodBanksMutation!): BloodBanks!
  createBloodBanks(relativePath: String!, params: BloodBanksMutation!): BloodBanks!
  updateDialysisCenters(relativePath: String!, params: DialysisCentersMutation!): DialysisCenters!
  createDialysisCenters(relativePath: String!, params: DialysisCentersMutation!): DialysisCenters!
  updateHospitals(relativePath: String!, params: HospitalsMutation!): Hospitals!
  createHospitals(relativePath: String!, params: HospitalsMutation!): Hospitals!
  updateNephrologyDoctors(relativePath: String!, params: NephrologyDoctorsMutation!): NephrologyDoctors!
  createNephrologyDoctors(relativePath: String!, params: NephrologyDoctorsMutation!): NephrologyDoctors!
  updateUrologyDoctors(relativePath: String!, params: UrologyDoctorsMutation!): UrologyDoctors!
  createUrologyDoctors(relativePath: String!, params: UrologyDoctorsMutation!): UrologyDoctors!
  updateVascularSurgeons(relativePath: String!, params: VascularSurgeonsMutation!): VascularSurgeons!
  createVascularSurgeons(relativePath: String!, params: VascularSurgeonsMutation!): VascularSurgeons!
  updateFaq(relativePath: String!, params: FaqMutation!): Faq!
  createFaq(relativePath: String!, params: FaqMutation!): Faq!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
}

input DocumentUpdateMutation {
  homepage: HomepageMutation
  author: AuthorMutation
  posts: PostsMutation
  emergency_contacts: Emergency_contactsMutation
  about: AboutMutation
  bloodBanks: BloodBanksMutation
  dialysisCenters: DialysisCentersMutation
  hospitals: HospitalsMutation
  nephrologyDoctors: NephrologyDoctorsMutation
  urologyDoctors: UrologyDoctorsMutation
  vascularSurgeons: VascularSurgeonsMutation
  faq: FaqMutation
  contact: ContactMutation
  relativePath: String
}

input DocumentMutation {
  homepage: HomepageMutation
  author: AuthorMutation
  posts: PostsMutation
  emergency_contacts: Emergency_contactsMutation
  about: AboutMutation
  bloodBanks: BloodBanksMutation
  dialysisCenters: DialysisCentersMutation
  hospitals: HospitalsMutation
  nephrologyDoctors: NephrologyDoctorsMutation
  urologyDoctors: UrologyDoctorsMutation
  vascularSurgeons: VascularSurgeonsMutation
  faq: FaqMutation
  contact: ContactMutation
}

input HomepageBannerMutation {
  title: String
  image: String
  color: String
  content: String
}

input HomepageNoticeMutation {
  enable: Boolean
  title: String
  content: String
}

input HomepageMutation {
  banner: [HomepageBannerMutation]
  notice: HomepageNoticeMutation
  body: JSON
}

input AuthorMutation {
  draft: Boolean
  title: String
  image: String
  bio: String
  phone: String
  email: String
  address: String
  body: JSON
}

input PostsMutation {
  draft: Boolean
  title: String
  date: String
  description: String
  image: String
  body: JSON
}

input Emergency_contactsMutation {
  draft: Boolean
  title: String
  body: JSON
}

input AboutMutation {
  draft: Boolean
  title: String
  image: String
  description: String
  body: JSON
}

input BloodBanksContact_listMutation {
  name: String
  specialist: String
  location: String
  contact_details: String
}

input BloodBanksMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [BloodBanksContact_listMutation]
  body: JSON
}

input DialysisCentersContact_listMutation {
  name: String
  specialist: String
  location: String
  contact_details: String
}

input DialysisCentersMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [DialysisCentersContact_listMutation]
  body: JSON
}

input HospitalsContact_listMutation {
  name: String
  specialist: String
  location: String
  contact_details: String
}

input HospitalsMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [HospitalsContact_listMutation]
  body: JSON
}

input NephrologyDoctorsContact_listMutation {
  name: String
  specialist: String
  location: String
  contact_details: String
}

input NephrologyDoctorsMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [NephrologyDoctorsContact_listMutation]
  body: JSON
}

input UrologyDoctorsContact_listMutation {
  name: String
  specialist: String
  location: String
  contact_details: String
}

input UrologyDoctorsMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [UrologyDoctorsContact_listMutation]
  body: JSON
}

input VascularSurgeonsContact_listMutation {
  name: String
  specialist: String
  location: String
  contact_details: String
}

input VascularSurgeonsMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_list: [VascularSurgeonsContact_listMutation]
  body: JSON
}

input FaqMutation {
  draft: Boolean
  title: String
  layout: String
  description: String
  body: JSON
}

input ContactContact_itemsMutation {
  name: String
  icon: String
  content: String
}

input ContactMutation {
  draft: Boolean
  title: String
  description: String
  layout: String
  contact_items: [ContactContact_itemsMutation]
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
